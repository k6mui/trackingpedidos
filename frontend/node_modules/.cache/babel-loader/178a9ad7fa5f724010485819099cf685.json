{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javie\\\\Documents\\\\UNI\\\\Proyecto-TRACKING DE PEDIDOS\\\\trackingpedidos\\\\frontend\\\\src\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport { GoogleMap, useLoadScript, DirectionsRenderer, DirectionsService, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map(props) {\n  _s();\n\n  // Función que inicializa el mapa.\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyCHmpOZxtVieAFlMzFjSBcwzd-mpGvbdt8\"\n  }); // Estado utilizado para renderizar las direcciones del mapa.\n\n  const [directions, setDirections] = useState(null); // Hook utilizado para renderizar un centro del mapa base y que este se actualice al movernos por el mapa.\n\n  const center = useMemo(() => ({\n    lat: 40.416775,\n    lng: -3.703790\n  }), []); // Variables utilizadas para mostrar las direcciones.\n\n  let sortedLocations = [];\n  let origin = {};\n  let destination = {};\n  let waypoints = []; // Función que se ejecuta al renderizar las direcciones.\n\n  const directionsCallback = response => {\n    if (response !== null) {\n      setDirections(response);\n    }\n  }; // Logica para mostrar las direcciones deseadas en función del numero de direcciones dadas.\n\n\n  if (props.ubicaciones && props.ubicaciones.length > 1) {\n    sortedLocations = props.ubicaciones.sort((a, b) => b.id - a.id);\n    origin = {\n      lat: sortedLocations[sortedLocations.length - 1].latitud,\n      lng: sortedLocations[sortedLocations.length - 1].longitud\n    };\n    destination = {\n      lat: sortedLocations[0].latitud,\n      lng: sortedLocations[0].longitud\n    };\n\n    if (props.ubicaciones.length > 2) {\n      waypoints = sortedLocations.slice(1, -1).map(ubicacion => ({\n        location: {\n          lat: ubicacion.latitud,\n          lng: ubicacion.longitud\n        },\n        stopover: true\n      }));\n    }\n  } // Opciones del mapa.\n\n\n  const mapOptions = {\n    disableDefaultUI: true,\n    clickableIcons: false\n  }; // Opciones en función de la carga del mapa.\n\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error al cargar el mapa\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 27\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Cargando el mapa...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 27\n  }, this); // Solo se renderizará  en caso de que existen direcciones.\n\n  const directionsRenderer = directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n    directions: directions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 46\n  }, this); // Renderizado de la página.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mapa\",\n    style: {\n      height: '500px',\n      width: '70%',\n      marginRight: '60px',\n      marginBottom: '60px'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      zoom: 15,\n      center: center,\n      mapContainerClassName: \"mapa\",\n      options: mapOptions,\n      children: [props.ubicaciones && props.ubicaciones.length === 1 && props.ubicaciones.map((ubicacion, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: ubicacion.latitud,\n          lng: ubicacion.longitud\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 62\n      }, this)), directionsRenderer, props.ubicaciones && props.ubicaciones.length > 1 && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: {\n          origin: origin,\n          destination: destination,\n          waypoints: waypoints,\n          travelMode: 'DRIVING'\n        },\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"/hm9fak+2LHX5bgWqrh1nJMmzmU=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useMemo","useState","GoogleMap","useLoadScript","DirectionsRenderer","DirectionsService","Marker","Map","props","isLoaded","loadError","googleMapsApiKey","directions","setDirections","center","lat","lng","sortedLocations","origin","destination","waypoints","directionsCallback","response","ubicaciones","length","sort","a","b","id","latitud","longitud","slice","map","ubicacion","location","stopover","mapOptions","disableDefaultUI","clickableIcons","directionsRenderer","height","width","marginRight","marginBottom","index","travelMode"],"sources":["C:/Users/javie/Documents/UNI/Proyecto-TRACKING DE PEDIDOS/trackingpedidos/frontend/src/Map.js"],"sourcesContent":["import { useMemo, useState } from 'react';\r\n\r\nimport { \r\n    GoogleMap, useLoadScript, DirectionsRenderer, DirectionsService, Marker\r\n} from '@react-google-maps/api';\r\n\r\nexport default function Map(props) {\r\n    // Función que inicializa el mapa.\r\n    const { isLoaded, loadError} = useLoadScript({ googleMapsApiKey:\"AIzaSyCHmpOZxtVieAFlMzFjSBcwzd-mpGvbdt8\"});\r\n    \r\n    // Estado utilizado para renderizar las direcciones del mapa.\r\n    const [directions, setDirections] = useState(null);\r\n\r\n    // Hook utilizado para renderizar un centro del mapa base y que este se actualice al movernos por el mapa.\r\n    const center = useMemo(() => ({  lat: 40.416775, lng: -3.703790  }), []);\r\n    \r\n    // Variables utilizadas para mostrar las direcciones.\r\n    let sortedLocations = [];\r\n    let origin = {};\r\n    let destination = {};\r\n    let waypoints = [];\r\n\r\n    // Función que se ejecuta al renderizar las direcciones.\r\n    const directionsCallback = (response) => {\r\n        if (response !== null) {\r\n            setDirections(response);\r\n        }\r\n    };\r\n\r\n    // Logica para mostrar las direcciones deseadas en función del numero de direcciones dadas.\r\n    if (props.ubicaciones && props.ubicaciones.length > 1) {\r\n        sortedLocations = props.ubicaciones.sort((a, b) => b.id - a.id);\r\n        origin = { lat: sortedLocations[sortedLocations.length-1].latitud, lng: sortedLocations[sortedLocations.length-1].longitud };\r\n        destination = { lat: sortedLocations[0].latitud, lng: sortedLocations[0].longitud };\r\n    \r\n        if (props.ubicaciones.length > 2) {\r\n            waypoints = sortedLocations.slice(1, -1).map((ubicacion) => ({\r\n                location: { lat: ubicacion.latitud, lng: ubicacion.longitud },\r\n                stopover: true,\r\n            }));\r\n        }\r\n    }\r\n\r\n    // Opciones del mapa.\r\n    const mapOptions = {\r\n        disableDefaultUI: true,\r\n        clickableIcons: false,\r\n    };\r\n\r\n    // Opciones en función de la carga del mapa.\r\n    if (loadError) return <div>Error al cargar el mapa</div>;\r\n    if (!isLoaded) return <div>Cargando el mapa...</div>;\r\n\r\n    // Solo se renderizará  en caso de que existen direcciones.\r\n    const directionsRenderer = directions && <DirectionsRenderer directions={directions} />\r\n\r\n    // Renderizado de la página.\r\n    return (\r\n        <div className=\"mapa\" style={{ height: '500px', width: '70%', marginRight:'60px', marginBottom:'60px' }}>\r\n        <GoogleMap zoom={15}  center={center} mapContainerClassName='mapa' options={mapOptions}>\r\n            { props.ubicaciones && props.ubicaciones.length === 1 &&\r\n                props.ubicaciones.map( (ubicacion, index) => <Marker key={index} position={{lat: ubicacion.latitud, lng: ubicacion.longitud}} />) \r\n            }\r\n            { directionsRenderer }\r\n            { props.ubicaciones && props.ubicaciones.length > 1 &&\r\n                <DirectionsService\r\n                    options={{\r\n                        origin: origin,\r\n                        destination: destination,\r\n                        waypoints: waypoints,\r\n                        travelMode: 'DRIVING',\r\n                    }}\r\n                    callback={directionsCallback}\r\n                />\r\n            }  \r\n        </GoogleMap>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}